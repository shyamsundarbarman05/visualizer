{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shyam\\\\Desktop\\\\visualizer\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Navbar from './components/Navbar';\nimport Controls from './components/Controls';\nimport Bars from './components/Bars';\nimport Tiles from './components/Tiles';\nimport InfoPanel from './components/InfoPanel';\nimport Footer from './components/Footer';\nimport { generateRandomArray } from './utils/generateArray';\nimport { sort, checkHealth } from './api/sortApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [array, setArray] = useState([]);\n  const [algorithm, setAlgorithm] = useState('bubble');\n  const [size, setSize] = useState(20);\n  const [speed, setSpeed] = useState(50);\n  const [isSorting, setIsSorting] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [steps, setSteps] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [originalArray, setOriginalArray] = useState([]);\n  const [visualizationType, setVisualizationType] = useState('bars');\n  const [isLoading, setIsLoading] = useState(false);\n  const [status, setStatus] = useState(null);\n  const [connectionStatus, setConnectionStatus] = useState({\n    type: 'loading',\n    message: 'Checking backend connectivity…'\n  });\n  const statusStyles = {\n    loading: 'bg-blue-100 text-blue-800 border border-blue-200 dark:bg-blue-900/40 dark:text-blue-200 dark:border-blue-800',\n    success: 'bg-green-100 text-green-800 border border-green-200 dark:bg-green-900/40 dark:text-green-200 dark:border-green-800',\n    error: 'bg-red-100 text-red-800 border border-red-200 dark:bg-red-900/40 dark:text-red-200 dark:border-red-800',\n    info: 'bg-gray-100 text-gray-800 border border-gray-200 dark:bg-gray-800/60 dark:text-gray-200 dark:border-gray-700'\n  };\n  const resetArray = () => {\n    const newArray = generateRandomArray(size);\n    setArray(newArray);\n    setOriginalArray([...newArray]);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsSorting(false);\n    setIsPaused(false);\n    setStatus(null);\n  };\n  useEffect(() => {\n    resetArray();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    let isMounted = true;\n    const verifyConnection = async () => {\n      try {\n        await checkHealth();\n        if (isMounted) {\n          setConnectionStatus({\n            type: 'success',\n            message: 'Backend connected and ready.'\n          });\n        }\n      } catch (error) {\n        console.error('Health check failed:', error);\n        if (isMounted) {\n          setConnectionStatus({\n            type: 'error',\n            message: 'Backend unreachable. Start the Flask server on port 5000.'\n          });\n        }\n      }\n    };\n    verifyConnection();\n    const intervalId = setInterval(verifyConnection, 30000);\n    return () => {\n      isMounted = false;\n      clearInterval(intervalId);\n    };\n  }, []);\n  const handleAlgorithmChange = value => {\n    setAlgorithm(value);\n    setSteps([]);\n    setCurrentStep(0);\n    setStatus(null);\n  };\n  const handleSizeChange = newSize => {\n    setSize(newSize);\n    const newArray = generateRandomArray(newSize);\n    setArray(newArray);\n    setOriginalArray([...newArray]);\n    setSteps([]);\n    setCurrentStep(0);\n    setStatus(null);\n  };\n  const handleCustomArraySubmit = customArray => {\n    setArray(customArray);\n    setOriginalArray([...customArray]);\n    setSize(customArray.length);\n    setSteps([]);\n    setCurrentStep(0);\n    setStatus(null);\n  };\n  const visualizeSort = async () => {\n    if (isSorting || isLoading) {\n      return;\n    }\n    setIsPaused(false);\n    setCurrentStep(0);\n    setSteps([]);\n    setStatus({\n      type: 'loading',\n      message: 'Fetching sort steps from the backend…'\n    });\n    setIsLoading(true);\n    try {\n      const sortSteps = await sort(algorithm, array);\n      if (!Array.isArray(sortSteps) || sortSteps.length === 0) {\n        throw new Error('No steps returned from backend');\n      }\n      setSteps(sortSteps);\n      setIsSorting(true);\n      setStatus({\n        type: 'success',\n        message: `Received ${sortSteps.length} steps for ${algorithm} sort.`\n      });\n      setConnectionStatus({\n        type: 'success',\n        message: 'Backend connected and ready.'\n      });\n    } catch (error) {\n      console.error('Sorting failed:', error);\n      setStatus({\n        type: 'error',\n        message: 'Unable to fetch sort steps. Ensure the backend server is running.'\n      });\n      setIsSorting(false);\n      setConnectionStatus({\n        type: 'error',\n        message: 'Backend unreachable. Start the Flask server on port 5000.'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const stopSort = () => {\n    setIsSorting(false);\n    setIsPaused(false);\n    setCurrentStep(0);\n    setArray([...originalArray]);\n    setSteps([]);\n    setStatus({\n      type: 'info',\n      message: 'Sort stopped.'\n    });\n  };\n  const togglePause = () => {\n    setIsPaused(!isPaused);\n  };\n  useEffect(() => {\n    if (isSorting && !isPaused && steps.length > 0 && currentStep < steps.length - 1) {\n      const delayMs = Math.max(20, 800 - speed * 6);\n      const timeoutId = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, delayMs);\n      return () => clearTimeout(timeoutId);\n    }\n    if (isSorting && steps.length > 0 && currentStep === steps.length - 1) {\n      setIsSorting(false);\n      setStatus({\n        type: 'success',\n        message: 'Sorting complete!'\n      });\n    }\n  }, [currentStep, steps, isSorting, isPaused, speed]);\n  const currentArrayState = steps[currentStep] ? steps[currentStep][0] : array;\n  const comparingIndices = steps[currentStep] ? steps[currentStep][1] : [];\n  const swappingIndices = steps[currentStep] ? steps[currentStep][2] : [];\n  const sortedIndices = steps[currentStep] ? steps[currentStep][3] : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"flex-grow container mx-auto px-4 py-8 space-y-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-4\",\n        children: [connectionStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `p-3 rounded-lg text-sm sm:text-base ${statusStyles[connectionStatus.type]}`,\n          children: connectionStatus.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this), status && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `p-3 rounded-lg text-sm sm:text-base ${statusStyles[status.type]}`,\n          children: status.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-6 bg-white dark:bg-gray-800 rounded-xl shadow-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"algorithm-select\",\n          className: \"text-xl font-bold text-gray-800 dark:text-white mr-4\",\n          children: \"Choose an Algorithm:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"algorithm-select\",\n          onChange: e => handleAlgorithmChange(e.target.value),\n          value: algorithm,\n          disabled: isSorting || isLoading,\n          className: \"px-4 py-2 border rounded-lg dark:bg-gray-700 dark:border-gray-600 focus:ring-2 focus:ring-blue-500\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"bubble\",\n            children: \"Bubble Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"insertion\",\n            children: \"Insertion Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"merge\",\n            children: \"Merge Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"quick\",\n            children: \"Quick Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"heap\",\n            children: \"Heap Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoPanel, {\n        algorithm: algorithm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {\n        onGenerate: resetArray,\n        onSort: visualizeSort,\n        onStop: stopSort,\n        onTogglePause: togglePause,\n        onSizeChange: handleSizeChange,\n        onSpeedChange: setSpeed,\n        onCustomArraySubmit: handleCustomArraySubmit,\n        onVisualizationChange: setVisualizationType,\n        isSorting: isSorting,\n        isPaused: isPaused,\n        isLoading: isLoading,\n        size: size,\n        speed: speed,\n        visualizationType: visualizationType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), visualizationType === 'bars' ? /*#__PURE__*/_jsxDEV(Bars, {\n        array: currentArrayState,\n        comparing: comparingIndices,\n        swapping: swappingIndices,\n        sorted: sortedIndices,\n        speed: speed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Tiles, {\n        array: currentArrayState,\n        comparing: comparingIndices,\n        swapping: swappingIndices,\n        sorted: sortedIndices,\n        speed: speed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"m7apYq47Kl2/B7+UGmx23RaNxK0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","Controls","Bars","Tiles","InfoPanel","Footer","generateRandomArray","sort","checkHealth","jsxDEV","_jsxDEV","App","_s","array","setArray","algorithm","setAlgorithm","size","setSize","speed","setSpeed","isSorting","setIsSorting","isPaused","setIsPaused","steps","setSteps","currentStep","setCurrentStep","originalArray","setOriginalArray","visualizationType","setVisualizationType","isLoading","setIsLoading","status","setStatus","connectionStatus","setConnectionStatus","type","message","statusStyles","loading","success","error","info","resetArray","newArray","isMounted","verifyConnection","console","intervalId","setInterval","clearInterval","handleAlgorithmChange","value","handleSizeChange","newSize","handleCustomArraySubmit","customArray","length","visualizeSort","sortSteps","Array","isArray","Error","stopSort","togglePause","delayMs","Math","max","timeoutId","setTimeout","prev","clearTimeout","currentArrayState","comparingIndices","swappingIndices","sortedIndices","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","e","target","disabled","onGenerate","onSort","onStop","onTogglePause","onSizeChange","onSpeedChange","onCustomArraySubmit","onVisualizationChange","comparing","swapping","sorted","_c","$RefreshReg$"],"sources":["C:/Users/shyam/Desktop/visualizer/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Navbar from './components/Navbar';\r\nimport Controls from './components/Controls';\r\nimport Bars from './components/Bars';\r\nimport Tiles from './components/Tiles';\r\nimport InfoPanel from './components/InfoPanel';\r\nimport Footer from './components/Footer';\r\nimport { generateRandomArray } from './utils/generateArray';\r\nimport { sort, checkHealth } from './api/sortApi';\r\n\r\nfunction App() {\r\n  const [array, setArray] = useState([]);\r\n  const [algorithm, setAlgorithm] = useState('bubble');\r\n  const [size, setSize] = useState(20);\r\n  const [speed, setSpeed] = useState(50);\r\n  const [isSorting, setIsSorting] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [steps, setSteps] = useState([]);\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [originalArray, setOriginalArray] = useState([]);\r\n  const [visualizationType, setVisualizationType] = useState('bars');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(null);\r\n  const [connectionStatus, setConnectionStatus] = useState({ type: 'loading', message: 'Checking backend connectivity…' });\r\n\r\n  const statusStyles = {\r\n    loading: 'bg-blue-100 text-blue-800 border border-blue-200 dark:bg-blue-900/40 dark:text-blue-200 dark:border-blue-800',\r\n    success: 'bg-green-100 text-green-800 border border-green-200 dark:bg-green-900/40 dark:text-green-200 dark:border-green-800',\r\n    error: 'bg-red-100 text-red-800 border border-red-200 dark:bg-red-900/40 dark:text-red-200 dark:border-red-800',\r\n    info: 'bg-gray-100 text-gray-800 border border-gray-200 dark:bg-gray-800/60 dark:text-gray-200 dark:border-gray-700',\r\n  };\r\n\r\n  const resetArray = () => {\r\n    const newArray = generateRandomArray(size);\r\n    setArray(newArray);\r\n    setOriginalArray([...newArray]);\r\n    setSteps([]);\r\n    setCurrentStep(0);\r\n    setIsSorting(false);\r\n    setIsPaused(false);\r\n    setStatus(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    resetArray();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const verifyConnection = async () => {\r\n      try {\r\n        await checkHealth();\r\n        if (isMounted) {\r\n          setConnectionStatus({ type: 'success', message: 'Backend connected and ready.' });\r\n        }\r\n      } catch (error) {\r\n        console.error('Health check failed:', error);\r\n        if (isMounted) {\r\n          setConnectionStatus({ type: 'error', message: 'Backend unreachable. Start the Flask server on port 5000.' });\r\n        }\r\n      }\r\n    };\r\n\r\n    verifyConnection();\r\n    const intervalId = setInterval(verifyConnection, 30000);\r\n\r\n    return () => {\r\n      isMounted = false;\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  const handleAlgorithmChange = (value) => {\r\n    setAlgorithm(value);\r\n    setSteps([]);\r\n    setCurrentStep(0);\r\n    setStatus(null);\r\n  };\r\n\r\n  const handleSizeChange = (newSize) => {\r\n    setSize(newSize);\r\n    const newArray = generateRandomArray(newSize);\r\n    setArray(newArray);\r\n    setOriginalArray([...newArray]);\r\n    setSteps([]);\r\n    setCurrentStep(0);\r\n    setStatus(null);\r\n  };\r\n\r\n  const handleCustomArraySubmit = (customArray) => {\r\n    setArray(customArray);\r\n    setOriginalArray([...customArray]);\r\n    setSize(customArray.length);\r\n    setSteps([]);\r\n    setCurrentStep(0);\r\n    setStatus(null);\r\n  };\r\n\r\n  const visualizeSort = async () => {\r\n    if (isSorting || isLoading) {\r\n      return;\r\n    }\r\n\r\n    setIsPaused(false);\r\n    setCurrentStep(0);\r\n    setSteps([]);\r\n    setStatus({ type: 'loading', message: 'Fetching sort steps from the backend…' });\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const sortSteps = await sort(algorithm, array);\r\n\r\n      if (!Array.isArray(sortSteps) || sortSteps.length === 0) {\r\n        throw new Error('No steps returned from backend');\r\n      }\r\n\r\n      setSteps(sortSteps);\r\n      setIsSorting(true);\r\n      setStatus({ type: 'success', message: `Received ${sortSteps.length} steps for ${algorithm} sort.` });\r\n      setConnectionStatus({ type: 'success', message: 'Backend connected and ready.' });\r\n    } catch (error) {\r\n      console.error('Sorting failed:', error);\r\n      setStatus({ type: 'error', message: 'Unable to fetch sort steps. Ensure the backend server is running.' });\r\n      setIsSorting(false);\r\n      setConnectionStatus({ type: 'error', message: 'Backend unreachable. Start the Flask server on port 5000.' });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const stopSort = () => {\r\n    setIsSorting(false);\r\n    setIsPaused(false);\r\n    setCurrentStep(0);\r\n    setArray([...originalArray]);\r\n    setSteps([]);\r\n    setStatus({ type: 'info', message: 'Sort stopped.' });\r\n  };\r\n\r\n  const togglePause = () => {\r\n    setIsPaused(!isPaused);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isSorting && !isPaused && steps.length > 0 && currentStep < steps.length - 1) {\r\n      const delayMs = Math.max(20, 800 - speed * 6);\r\n      const timeoutId = setTimeout(() => {\r\n        setCurrentStep((prev) => prev + 1);\r\n      }, delayMs);\r\n\r\n      return () => clearTimeout(timeoutId);\r\n    }\r\n\r\n    if (isSorting && steps.length > 0 && currentStep === steps.length - 1) {\r\n      setIsSorting(false);\r\n      setStatus({ type: 'success', message: 'Sorting complete!' });\r\n    }\r\n  }, [currentStep, steps, isSorting, isPaused, speed]);\r\n\r\n  const currentArrayState = steps[currentStep] ? steps[currentStep][0] : array;\r\n  const comparingIndices = steps[currentStep] ? steps[currentStep][1] : [];\r\n  const swappingIndices = steps[currentStep] ? steps[currentStep][2] : [];\r\n  const sortedIndices = steps[currentStep] ? steps[currentStep][3] : [];\r\n\r\n  return (\r\n    <div className=\"flex flex-col min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200\">\r\n      <Navbar />\r\n      <main className=\"flex-grow container mx-auto px-4 py-8 space-y-8\">\r\n        <div className=\"space-y-4\">\r\n          {connectionStatus && (\r\n            <div className={`p-3 rounded-lg text-sm sm:text-base ${statusStyles[connectionStatus.type]}`}>\r\n              {connectionStatus.message}\r\n            </div>\r\n          )}\r\n          {status && (\r\n            <div className={`p-3 rounded-lg text-sm sm:text-base ${statusStyles[status.type]}`}>\r\n              {status.message}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"p-6 bg-white dark:bg-gray-800 rounded-xl shadow-lg\">\r\n          <label htmlFor=\"algorithm-select\" className=\"text-xl font-bold text-gray-800 dark:text-white mr-4\">\r\n            Choose an Algorithm:\r\n          </label>\r\n          <select\r\n            id=\"algorithm-select\"\r\n            onChange={(e) => handleAlgorithmChange(e.target.value)}\r\n            value={algorithm}\r\n            disabled={isSorting || isLoading}\r\n            className=\"px-4 py-2 border rounded-lg dark:bg-gray-700 dark:border-gray-600 focus:ring-2 focus:ring-blue-500\"\r\n          >\r\n            <option value=\"bubble\">Bubble Sort</option>\r\n            <option value=\"insertion\">Insertion Sort</option>\r\n            <option value=\"merge\">Merge Sort</option>\r\n            <option value=\"quick\">Quick Sort</option>\r\n            <option value=\"heap\">Heap Sort</option>\r\n          </select>\r\n        </div>\r\n\r\n        <InfoPanel algorithm={algorithm} />\r\n\r\n        <Controls\r\n          onGenerate={resetArray}\r\n          onSort={visualizeSort}\r\n          onStop={stopSort}\r\n          onTogglePause={togglePause}\r\n          onSizeChange={handleSizeChange}\r\n          onSpeedChange={setSpeed}\r\n          onCustomArraySubmit={handleCustomArraySubmit}\r\n          onVisualizationChange={setVisualizationType}\r\n          isSorting={isSorting}\r\n          isPaused={isPaused}\r\n          isLoading={isLoading}\r\n          size={size}\r\n          speed={speed}\r\n          visualizationType={visualizationType}\r\n        />\r\n\r\n        {visualizationType === 'bars' ? (\r\n          <Bars\r\n            array={currentArrayState}\r\n            comparing={comparingIndices}\r\n            swapping={swappingIndices}\r\n            sorted={sortedIndices}\r\n            speed={speed}\r\n          />\r\n        ) : (\r\n          <Tiles\r\n            array={currentArrayState}\r\n            comparing={comparingIndices}\r\n            swapping={swappingIndices}\r\n            sorted={sortedIndices}\r\n            speed={speed}\r\n          />\r\n        )}\r\n      </main>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}